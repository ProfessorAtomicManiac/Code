Algorithm complexity related assignment: Please analyze the complexity of each
method in data structures we discussed so far, including linked list, stack, and queue.

Linked List:
    size() - O(1)
    isEmpty() - O(1)
    insertAtHead(T data) - O(1)
    insertAtTail(T data) or append(T data) - O(1)
    removeAtHead() - O(1)
    peekFirst() - O(1)
    peekLast() - O(1)
    contains(T data) - O(n)
    removeAtTail() - O(n)
    getElement(int index) - O(n)
    removeIndex(int index) - O(n)
    removeValue(T data) - O(n)
    insert(T data, int index) - O(n)

Stack:
    size() - O(1)
    isEmpty() - O(1)
    push(T data) - O(1)
    pop() - O(1)
    peek() - O(1)
    toString() - O(n)
    get(int index) - O(n)
    contains(T data) - O(n)
    transfer() or transfer(Stack<T> stack) - O(n)

Queue:
    size() - O(1)
    isEmpty() - O(1)
    enqueue(T data) - O(1)
    peekFront() - O(1)
    peekBack() - O(1)
    dequeue() - O(n)
    get(int index) - O(n)
    contains(T data) - O(n)
    toString() - O(n)